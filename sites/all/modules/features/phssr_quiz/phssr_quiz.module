<?php
/**
 * @file
 * Code for the Phssr Quiz feature.
 */

include_once 'phssr_quiz.features.inc';

/**
 * Implements hook_theme_registry_alter().
 */
function phssr_quiz_theme_registry_alter(&$theme_registry) {
  // Intercept Quiz Results Form.
  $theme_registry['quiz_result']['function'] = 'phssr_quiz_quiz_result';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function phssr_quiz_form_quiz_report_form_alter(&$form, &$form_state) {
  // Need to hijack the quiz reports form theme.
  // Allow a template with the quiz node and result id to be overridden.
  $form['#theme'] = 'phssr_quiz_report_form__quiz_' . arg(1) . '_result_' . arg(3);
}

/**
 * Implements hook_theme().
 */
function phssr_quiz_theme() {
  $module_path = drupal_get_path('module', 'phssr_quiz');
  return array(
    'phssr_quiz_report_form' => array(
      'render element' => 'form',
      'path' => $module_path . '/templates',
      'template' => 'phssr-quiz-report-form',
      'pattern' => 'phssr_quiz_report_form__'
    ),
  );
}

/**
 * Implements hook_preprocess_THEME_NAME().
 */
function phssr_quiz_preprocess_phssr_quiz_report_form(&$variables) {
  $form = $variables['form'];

  foreach ($form as $key => $sub_form) {
    if (!is_numeric($key)) {
      continue;
    }

    // Add custom variables.
    $variables['questions'][] = array(
      'nid' => $sub_form['nid']['#value'],
      'result_id' => $sub_form['result_id']['#value'],
      'response' => array(
        '#markup' => $sub_form['response']['#markup'],
        '#data' => $sub_form['response']['#data'],
        '#labels' => $sub_form['response']['#labels'],
      ),
      'question' => $sub_form['question'],
      'max_score' => $sub_form['max_score']['#value'],
      'question_feedback' => $sub_form['question_feedback'],
      'score_display' => array(
        '#markup' => $sub_form['score_display']['#markup'],
        '#data' => array(
          'score' => $sub_form['score_display']['#data']['score'],
          'max_score' => $sub_form['score_display']['#data']['max_score'],
          'class' => $sub_form['score_display']['#data']['class'],
        )
      ),
    );

    // Array of values to hide in the template.
    $variables['hide_form_element'][] = $key;
  }







  // Template suggestions.
  $quiz = node_load(arg(1));
  $result_id = arg(3);
  // Result Template for this Quiz Node.
  $variables['theme_hook_suggestions'][] = 'phssr_quiz_report_form__quiz_' . $quiz->nid;
  // Result Template for the Quiz Node's specific results.
  $variables['theme_hook_suggestions'][] = 'phssr_quiz_report_form__quiz_' . $quiz->nid . '_results_' . $result_id;
  // Result Template for the Quiz Type.
  if (!empty($quiz->field_quiz_type)) {
    $quiz_type = str_replace(' ', '_', strtolower($quiz->field_quiz_type[LANGUAGE_NONE][0]['value']));
    $variables['theme_hook_suggestions'][] = 'phssr_quiz_report_form__' . $quiz_type;
  }
}

/**
 * Implements drupal_alter().
 *
 * Override the Classes.
 */
function phssr_quiz_quiz_question_info_alter(&$info) {
  // Override Response Classes.
  if (isset($info['multichoice'])) {
    $info['multichoice']['response provider'] = "PhssrMultichoiceResponse";
  }
}

/**
 * Implements hook_preprocess_THEME_NAME().
 */
function phssr_quiz_preprocess_quiz_question_feedback(&$variables) {
  $foo = 'bar';
}

/**
 * OVERWRITE theme_quiz_result: See @quiz.pages.inc
 * Theme the result page.
 *
 * @param $quiz
 *  The quiz node object.
 * @param $questions
 *  The questions array as defined by _quiz_get_answers.
 * @param $score
 *  Array of score information as returned by quiz_calculate_score().
 * @param $summary
 *  Filtered text of the summary.
 * @return
 *  Themed html.
 *
 * @ingroup themeable
 */
function phssr_quiz_quiz_result($variables) {
  global $user;
  $quiz = $variables['quiz'];
  $questions = $variables['questions'];
  $score = $variables['score'];
  $summary = $variables['summary'];
  $quiz_result = quiz_result_load($variables['result_id']);
  $account = $variables['account'];

  if (!$score['is_evaluated'] && empty($_POST)) {
    $msg = t('Parts of this @quiz have not been evaluated yet. The score below is not final.', array('@quiz' => QUIZ_NAME));
    drupal_set_message($msg, 'warning');
  }

  // Display overall result.
  $output = '';
  $params = array(
    '%num_correct' => $score['numeric_score'],
    '%question_count' => $score['possible_score'],
    '!username' => ($user->uid == $account->uid) ? t('You') : theme('username', array('account' => $account)),
    '@score' => $score['percentage_score'],
    '!yourtotal' => ($user->uid == $account->uid) ? t('Your') : t('Total'),
  );

  $score_out = '';
  if (quiz_feedback_can_review('score', $quiz_result)) {
    // Show score.
    $score_out .= '<div id="quiz_score_possible">' . t('!username got %num_correct of %question_count possible points.', $params) . '</div>' . "\n";
    $score_out .= '<div id="quiz_score_percent">' . t('!yourtotal score: @score%', $params) . '</div>';
  }

  $report_form = drupal_get_form('quiz_report_form', $questions, $quiz_result->result_id);

  $quiz_feedback['#markup'] = '';
  if (quiz_feedback_can_review('quiz_feedback', $quiz_result)) {
    // Show quiz feedback.
    if (!empty($summary['passfail'])) {
      $quiz_feedback['#markup'] .= '<div id="quiz-summary">' . $summary['passfail'] . '</div>';
    }
    if (!empty($summary['result'])) {
      $quiz_feedback['#markup'] .= '<div id="quiz-summary">' . $summary['result'] . '</div>';
    }
  }
  $report_form['quiz_feedback'] = $quiz_feedback;

  $form = drupal_render($report_form);
  return $score_out . $form;
}